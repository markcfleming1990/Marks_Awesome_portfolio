{"ast":null,"code":"/* eslint-disable import/no-anonymous-default-export */export default\"\\n#define PHONG\\n\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\nuniform float time;\\nvarying vec2 vUv;\\nvarying vec3 newPosition;\\nvarying float noise;\\n\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <envmap_physical_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\n\\nvoid main() {\\n  #include <clipping_planes_fragment>\\n\\n  vec3 color = vec3(vUv * (0.2 - 2.0 * noise), 1.0);\\n  vec3 finalColors = vec3(color.b * 1.5, color.r, color.r);\\n  vec4 diffuseColor = vec4(cos(finalColors * noise * 3.0), 1.0);\\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\\n  vec3 totalEmissiveRadiance = emissive;\\n\\n  #include <logdepthbuf_fragment>\\n  #include <map_fragment>\\n  #include <color_fragment>\\n  #include <alphamap_fragment>\\n  #include <alphatest_fragment>\\n  #include <specularmap_fragment>\\n  #include <normal_fragment_begin>\\n  #include <normal_fragment_maps>\\n  #include <emissivemap_fragment>\\n  #include <lights_phong_fragment>\\n  #include <lights_fragment_begin>\\n  #include <lights_fragment_maps>\\n  #include <lights_fragment_end>\\n  #include <aomap_fragment>\\n\\n  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\n  #include <envmap_fragment>\\n  #include <premultiplied_alpha_fragment>\\n  #include <tonemapping_fragment>\\n  #include <encodings_fragment>\\n  #include <fog_fragment>\\n\\n  gl_FragColor = vec4(outgoingLight, diffuseColor.a);\\n}\\n\";","map":{"version":3,"names":[],"sources":["C:/Users/Markie Mark/Desktop/Marks_Awesome_portfolio/src/components/background/sphereFragShader.js"],"sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nexport default `\r\n#define PHONG\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\nuniform float time;\r\nvarying vec2 vUv;\r\nvarying vec3 newPosition;\r\nvarying float noise;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <gradientmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars_begin>\r\n#include <envmap_physical_pars_fragment>\r\n#include <lights_phong_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n  #include <clipping_planes_fragment>\r\n\r\n  vec3 color = vec3(vUv * (0.2 - 2.0 * noise), 1.0);\r\n  vec3 finalColors = vec3(color.b * 1.5, color.r, color.r);\r\n  vec4 diffuseColor = vec4(cos(finalColors * noise * 3.0), 1.0);\r\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\r\n  vec3 totalEmissiveRadiance = emissive;\r\n\r\n  #include <logdepthbuf_fragment>\r\n  #include <map_fragment>\r\n  #include <color_fragment>\r\n  #include <alphamap_fragment>\r\n  #include <alphatest_fragment>\r\n  #include <specularmap_fragment>\r\n  #include <normal_fragment_begin>\r\n  #include <normal_fragment_maps>\r\n  #include <emissivemap_fragment>\r\n  #include <lights_phong_fragment>\r\n  #include <lights_fragment_begin>\r\n  #include <lights_fragment_maps>\r\n  #include <lights_fragment_end>\r\n  #include <aomap_fragment>\r\n\r\n  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n  #include <envmap_fragment>\r\n  #include <premultiplied_alpha_fragment>\r\n  #include <tonemapping_fragment>\r\n  #include <encodings_fragment>\r\n  #include <fog_fragment>\r\n\r\n  gl_FragColor = vec4(outgoingLight, diffuseColor.a);\r\n}\r\n`;\r\n"],"mappings":"AAAA,uDACA"},"metadata":{},"sourceType":"module"}