{"ast":null,"code":"/**\r\n * Clean up a scene's materials and geometry\r\n */\nexport const cleanScene = scene => {\n  scene.traverse(object => {\n    if (!object.isMesh) return;\n    object.geometry.dispose();\n\n    if (object.material.isMaterial) {\n      cleanMaterial(object.material);\n    } else {\n      for (const material of object.material) {\n        cleanMaterial(material);\n      }\n    }\n  });\n  scene.dispose();\n};\n/**\r\n * Clean up and dispose of a material\r\n */\n\nexport const cleanMaterial = material => {\n  material.dispose();\n\n  for (const key of Object.keys(material)) {\n    const value = material[key];\n\n    if (value && typeof value === 'object' && 'minFilter' in value) {\n      value.dispose();\n    }\n  }\n};\n/**\r\n * Clean up and dispose of a renderer\r\n */\n\nexport const cleanRenderer = renderer => {\n  renderer.dispose();\n  renderer.forceContextLoss();\n  renderer = null;\n};\n/**\r\n * Clean up lights by removing them from their parent\r\n */\n\nexport const removeLights = lights => {\n  for (const light of lights) {\n    light.parent.remove(light);\n  }\n};\n/**\r\n * A reasonable default pixel ratio\r\n */\n\nexport const renderPixelRatio = 2;","map":{"version":3,"names":["cleanScene","scene","traverse","object","isMesh","geometry","dispose","material","isMaterial","cleanMaterial","key","Object","keys","value","cleanRenderer","renderer","forceContextLoss","removeLights","lights","light","parent","remove","renderPixelRatio"],"sources":["C:/Users/Markie Mark/Desktop/Marks_Awesome_portfolio/src/utils/three.js"],"sourcesContent":["/**\r\n * Clean up a scene's materials and geometry\r\n */\r\nexport const cleanScene = scene => {\r\n  scene.traverse(object => {\r\n    if (!object.isMesh) return;\r\n\r\n    object.geometry.dispose();\r\n\r\n    if (object.material.isMaterial) {\r\n      cleanMaterial(object.material);\r\n    } else {\r\n      for (const material of object.material) {\r\n        cleanMaterial(material);\r\n      }\r\n    }\r\n  });\r\n\r\n  scene.dispose();\r\n};\r\n\r\n/**\r\n * Clean up and dispose of a material\r\n */\r\nexport const cleanMaterial = material => {\r\n  material.dispose();\r\n\r\n  for (const key of Object.keys(material)) {\r\n    const value = material[key];\r\n    if (value && typeof value === 'object' && 'minFilter' in value) {\r\n      value.dispose();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Clean up and dispose of a renderer\r\n */\r\nexport const cleanRenderer = renderer => {\r\n  renderer.dispose();\r\n  renderer.forceContextLoss();\r\n  renderer = null;\r\n};\r\n\r\n/**\r\n * Clean up lights by removing them from their parent\r\n */\r\nexport const removeLights = lights => {\r\n  for (const light of lights) {\r\n    light.parent.remove(light);\r\n  }\r\n};\r\n\r\n/**\r\n * A reasonable default pixel ratio\r\n */\r\nexport const renderPixelRatio = 2;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAGC,KAAK,IAAI;EACjCA,KAAK,CAACC,QAAN,CAAeC,MAAM,IAAI;IACvB,IAAI,CAACA,MAAM,CAACC,MAAZ,EAAoB;IAEpBD,MAAM,CAACE,QAAP,CAAgBC,OAAhB;;IAEA,IAAIH,MAAM,CAACI,QAAP,CAAgBC,UAApB,EAAgC;MAC9BC,aAAa,CAACN,MAAM,CAACI,QAAR,CAAb;IACD,CAFD,MAEO;MACL,KAAK,MAAMA,QAAX,IAAuBJ,MAAM,CAACI,QAA9B,EAAwC;QACtCE,aAAa,CAACF,QAAD,CAAb;MACD;IACF;EACF,CAZD;EAcAN,KAAK,CAACK,OAAN;AACD,CAhBM;AAkBP;AACA;AACA;;AACA,OAAO,MAAMG,aAAa,GAAGF,QAAQ,IAAI;EACvCA,QAAQ,CAACD,OAAT;;EAEA,KAAK,MAAMI,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAAlB,EAAyC;IACvC,MAAMM,KAAK,GAAGN,QAAQ,CAACG,GAAD,CAAtB;;IACA,IAAIG,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsC,eAAeA,KAAzD,EAAgE;MAC9DA,KAAK,CAACP,OAAN;IACD;EACF;AACF,CATM;AAWP;AACA;AACA;;AACA,OAAO,MAAMQ,aAAa,GAAGC,QAAQ,IAAI;EACvCA,QAAQ,CAACT,OAAT;EACAS,QAAQ,CAACC,gBAAT;EACAD,QAAQ,GAAG,IAAX;AACD,CAJM;AAMP;AACA;AACA;;AACA,OAAO,MAAME,YAAY,GAAGC,MAAM,IAAI;EACpC,KAAK,MAAMC,KAAX,IAAoBD,MAApB,EAA4B;IAC1BC,KAAK,CAACC,MAAN,CAAaC,MAAb,CAAoBF,KAApB;EACD;AACF,CAJM;AAMP;AACA;AACA;;AACA,OAAO,MAAMG,gBAAgB,GAAG,CAAzB"},"metadata":{},"sourceType":"module"}